import java.nio.charset.StandardCharsets;

/**
 * this helpful class case any type to byte array in big-endian order,
 * and cast byte array to any type.
 * most of the code is generated by Copilot.
 */
public final class Bytes {
    public static byte[] fromShort(short val) {
        return new byte[]{
                (byte) ((val >> 8) & 0xff),
                (byte) (val & 0xff)
        };
    }

    public static short toShort(byte[] arr, int offset) {
        return (short) (((arr[offset] & 0xff) << 8) | (arr[offset + 1] & 0xff));
    }

    public static short toShort(byte[] arr) {
        return toShort(arr, 0);
    }

    public static byte[] fromInt(int val) {
        return new byte[]{
                (byte) ((val >> 24) & 0xff),
                (byte) ((val >> 16) & 0xff),
                (byte) ((val >> 8) & 0xff),
                (byte) (val & 0xff)
        };
    }

    public static int toInt(byte[] arr, int offset) {
        return ((arr[offset] & 0xff) << 24)
                | ((arr[offset + 1] & 0xff) << 16)
                | ((arr[offset + 2] & 0xff) << 8) |
                (arr[offset + 3] & 0xff);
    }

    public static int toInt(byte[] arr) {
        return toInt(arr, 0);
    }

    public static byte[] fromString(String str) {
        return str.getBytes(StandardCharsets.UTF_8);
    }

    /**
     * NOTES: assuming the string is null-terminated.
     * @param arr
     * @param offset
     * @param len
     * @return
     */
    public static String toString(byte[] arr, int offset, int len) {
        int l = 0;
        while(l < len && arr[offset + l] != 0) {
            l++;
        }
        return new String(arr, offset, l, StandardCharsets.UTF_8);
    }

    public static String toString(byte[] arr) {
        return toString(arr, 0, arr.length);
    }
}
